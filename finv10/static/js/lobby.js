document.addEventListener('DOMContentLoaded', () => { const analyzeBtn = document.getElementById('analyze-btn'); const cyContainer = document.getElementById('cy'); const loadingOverlay = document.getElementById('cy-loading'); const centralityControls = document.querySelector('.centrality-controls'); const centralityResultsDiv = document.getElementById('centrality-results'); let cy; let analyticsData = null; const communityColors = ['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3']; analyzeBtn.addEventListener('click', async () => { loadingOverlay.textContent = 'Building graph...'; loadingOverlay.style.display = 'flex'; analyzeBtn.disabled = true; try { const response = await fetch('/api/network_graph'); const graphData = await response.json(); if (cy) { cy.destroy(); } cy = cytoscape({ container: cyContainer, elements: graphData, style: [ { selector: 'node', style: { 'background-color': (ele) => communityColors[ele.data('community_id') % communityColors.length], 'label': 'data(id)', 'font-size': '10px', 'color': '#fff', 'text-outline-color': '#1E293B', 'text-outline-width': 3 }}, { selector: 'edge', style: { 'width': 1.5, 'line-color': '#334155', 'curve-style': 'bezier' }} ], layout: { name: 'cose', idealEdgeLength: 100, nodeOverlap: 20, refresh: 20, fit: true, padding: 30, randomize: false, componentSpacing: 100, nodeRepulsion: 400000, edgeElasticity: 100, nestingFactor: 5, gravity: 80, numIter: 1000, initialTemp: 200, coolingFactor: 0.95, minTemp: 1.0 } }); } catch (error) { loadingOverlay.textContent = 'Error loading graph.'; } finally { loadingOverlay.style.display = 'none'; analyzeBtn.disabled = false; } }); centralityControls.addEventListener('click', async (e) => { if (e.target.tagName !== 'BUTTON') return; const metric = e.target.dataset.metric; if (!analyticsData) { centralityResultsDiv.innerHTML = '<p class="placeholder">Fetching analytics...</p>'; const response = await fetch('/api/user_analytics'); analyticsData = await response.json(); } displayCentrality(metric); }); function displayCentrality(metric) { const data = analyticsData[metric]; let tableHTML = `<table><thead><tr><th>User</th><th>${metric.charAt(0).toUpperCase() + metric.slice(1)} Score</th></tr></thead><tbody>`; data.forEach(([user, score]) => { tableHTML += `<tr><td>${user}</td><td>${score.toFixed(4)}</td></tr>`; }); tableHTML += '</tbody></table>'; centralityResultsDiv.innerHTML = tableHTML; } });